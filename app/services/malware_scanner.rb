class MalwareScanner
  ClamdscanError = Class.new(StandardError)

  def self.call(file_path)
    new(file_path).call
  end

  LOCAL_COMMAND     = %w[clamdscan --fdpass --no-summary].freeze
  CONTAINER_COMMAND = %w[clamdscan -c config/clamd.container.conf --stream --no-summary].freeze

  attr_reader :file_path, :uploader, :file_details

  def initialize(file_path:, uploader:, file_details: nil)
    @file_path = file_path
    @uploader = uploader
    @file_details = file_details
  end

  def call
    MalwareScanResult.new(
      uploader: uploader,
      virus_found: virus_found?,
      scan_result: scan_result.result,
      file_details: file_details
    ).tap(&:save!)
  end

  private

  def virus_found?
    @virus_found ||= !scan_result.status.success?
  end

  def scan_result
    @scan_result ||= begin
      stdout, stderr, status = Open3.capture3(*(command + [file_path.to_s]))
      result = stdout.strip

      raise ClamdscanError, (stderr.presence || stdout) if status.exitstatus == 2

      OpenStruct.new(
        result: result,
        status: status
      )
    end
  end

  def command
    ENV['LOCAL_CLAMAV'] == 'true' ? LOCAL_COMMAND : CONTAINER_COMMAND
  end
end
