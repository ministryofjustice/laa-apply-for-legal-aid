version: 2.0

references:
  deploy_container_config: &deploy_container_config
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  build_containers_config: &build_container_config
    docker:
    - image: circleci/ruby:2.5.3-node-browsers
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
    - image: postgres:10.5
    - image: redis:5.0

  setup_test_env: &setup_test_env
    run:
      name: Setup aws on debian environment
      command: |
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-1 --no-include-email)

  install_clamav: &install_clamav
    run:
      name: Install Clamav
      command: |
        sudo apt-get install clamav clamav-daemon -y
        sudo freshclam
        sudo /etc/init.d/clamav-daemon start

  build_docker_image: &build_docker_image
    run:
      name: Build laa-apply-for-legal-aid  docker image
      command: docker build -t app .

  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
        fi

jobs:
  build_and_test:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - *setup_test_env
    - *install_clamav
    - restore_cache:
        keys:
          - laa-apply-for-legal-aid-v2-{{ checksum "Gemfile.lock" }}
          - laa-apply-for-legal-aid-v2

    - run:
        name: Bundle Install
        command: bundle check --path vendor/bundle || bundle install --path vendor/bundle

      # Store bundle cache
    - save_cache:
        key: laa-apply-for-legal-aid-v2-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle
    - run: sudo apt install -y postgresql-client || true
    - run:
        name: Database Setup
        command: |
          bundle exec rake db:setup
          bundle exec rake db:migrate
    - run:
        name: Install NPM packages
        command: npm install
    - run:
        name: Run Tests
        command: bundle exec rake
    - *build_docker_image
    - *push_to_ecr

  deploy_uat:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup UAT
        command: |
          $(aws ecr get-login --region eu-west-1 --no-include-email)
          setup-kube-auth
          kubectl config use-context uat
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy

  deploy_staging:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --region eu-west-1 --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to staging
        command: |

          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}" \
                        --set ingress.hosts="{${STAGING_HOST}}" \
                        --set replicaCount="2"

  deploy_production:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup production
        command: |
          $(aws ecr get-login --region eu-west-1 --no-include-email)
          setup-kube-auth
          kubectl config use-context production
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |

          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}" \
                        --set ingress.hosts="{${PRODUCTION_HOST}}" \
                        --set replicaCount="2"

  clean_up_ecr:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *setup_test_env
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - build_and_test
    - hold_uat:
        type: approval
        requires:
        - build_and_test
    - deploy_uat:
        requires:
        - hold_uat
    - hold_staging:
        type: approval
        requires:
        - build_and_test
        filters:
          branches:
            only: master
    - deploy_staging:
        requires:
        - hold_staging
        filters:
          branches:
            only: master
    - hold_production:
        type: approval
        requires:
        - deploy_staging
        filters:
          branches:
            only: master
    - deploy_production:
        requires:
        - hold_production
        filters:
          branches:
            only: master
  nightly:
    triggers:
    - schedule:
        cron: "0 2 * * *"
        filters:
          branches:
            only:
            - master
    jobs:
    - clean_up_ecr
    - deploy_staging
