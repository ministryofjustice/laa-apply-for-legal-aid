version: 2.0

references:
  deploy_container_config: &deploy_container_config
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  build_container_config: &build_container_config
    docker:
    - image: circleci/ruby:2.6.3-node-browsers
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
    - image: postgres:10.5
    - image: redis:5.0
    - image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/laa-apply-for-legal-aid/clamav:1.0.2

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws on debian environment
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "1" ] || [ "${CIRCLE_JOB}" == "clean_up_ecr" ]; then
          sudo apt-get --assume-yes install python3-pip
          sudo pip3 install awscli
          $(aws ecr get-login --region eu-west-2 --no-include-email)
        fi

  install_clamav: &install_clamav
    run:
      name: Install Clamav Client
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          sudo apt-get install clamav-daemon -y
        fi

  install_libreoffice: &install_libreoffice
    run:
      name: Install LibreOffice
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          sudo apt-get install libreoffice -y
        fi

  install_wkhtmltopdf: &install_wkhtmltopdf
    run:
      name: Install LibreOffice
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
          sudo apt-get install wkhtmltopdf -y
        fi

  build_docker_image: &build_docker_image
    run:
      name: Build laa-apply-for-legal-aid  docker image
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "1" ]; then
          docker build -t app .
        fi

  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        if [ "${CIRCLE_NODE_INDEX}" == "1" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"

          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          fi
        fi

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update

  setup_uat_kubectl: &setup_uat_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        setup-kube-auth
        kubectl config use-context uat

jobs:
  build_and_test:
    <<: *build_container_config
    parallelism: 2
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - *update_packages
    - *setup_aws_login
    - *install_clamav
    - *install_libreoffice
    - *install_wkhtmltopdf
    - restore_cache:
        keys:
          - v1-gems-cache-{{ checksum "Gemfile.lock" }}
          - v1-gems-cache
    - run:
        name: Bundle Install
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            gem install bundler -v 2.0.2
            bundle check --path vendor/bundle || bundle install --path vendor/bundle && bundle clean
          fi
    - save_cache:
        key: v1-gems-cache-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle
    - run:
        name: Database Setup
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            sudo apt install -y postgresql-client || true
            git checkout origin/master
            bundle check --path vendor/bundle || bundle install --path vendor/bundle
            bundle exec rake db:create db:schema:load
            git checkout -
            bundle check --path vendor/bundle || bundle install --path vendor/bundle
            bundle exec rake db:migrate db:seed
          fi
    - restore_cache:
        keys:
          - v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
          - v1-yarn-packages-cache
    - run:
        name: Install Yarn packages
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            yarn --frozen-lockfile
          fi
    - save_cache:
        key: v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
        paths:
          - node_modules
    - run:
        name: Run Rubocop
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            bin/rails rubocop
          fi
    - run:
        name: Run erblint
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            bin/rails erblint
          fi
    - run:
        name: Run javascript tests
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            bin/rails javascript_tests
          fi
    - run:
        name: Run ruby tests
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            bin/rails spec
          fi
    - run:
        name: Run integration tests
        command: |
          if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
            SAVE_PAGES=true bin/rails cucumber
          fi
    - *build_docker_image
    - *push_to_ecr
    - run: mkdir -p tmp/webhint_inputs
    - persist_to_workspace:
        root: tmp
        paths:
          - webhint_inputs

  deploy_uat:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - *setup_uat_kubectl
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy

  deploy_staging:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to staging
        command: |

          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}" \
                        --set ingress.hosts="{${STAGING_HOST}}"

  deploy_production:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup production
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context production
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |

          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}" \
                        --set ingress.hosts="{${PRODUCTION_HOST}}"

  clean_up_ecr:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *update_packages
    - *setup_aws_login
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

  run_webhint:
    <<: *build_container_config
    steps:
    - checkout
    - attach_workspace:
        at: tmp
    - *update_packages
    - restore_cache:
        keys:
          - v1-gems-cache-{{ checksum "Gemfile.lock" }}
          - v1-gems-cache
    - run:
        name: Bundle Install
        command: |
          gem install bundler -v 2.0.2
          bundle check --path vendor/bundle || bundle install --path vendor/bundle && bundle clean
    - restore_cache:
        keys:
          - v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
          - v1-yarn-packages-cache
    - run:
        name: Install Yarn packages
        command: yarn --frozen-lockfile
    - run:
        name: Generate webhint reports
        command: ./bin/generate_webhint_reports.sh
    - run:
        name: gzip webhint reports
        command: tar -zcvf hint-report.tar.gz hint-report/
    - store_artifacts:
        path: ./hint-report.tar.gz
        destination: webhint-reports

  delete_uat:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - run:
        name: Delete UAT release
        command: |
          ./bin/delete_uat_release

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - build_and_test
    - run_webhint
    - run_webhint:
        requires:
        - build_and_test
    - hold_uat:
        type: approval
    - deploy_uat:
        requires:
        - hold_uat
        - build_and_test
    - hold_staging:
        type: approval
        requires:
        - build_and_test
        filters:
          branches:
            only: master
    - deploy_staging:
        requires:
        - hold_staging
        filters:
          branches:
            only: master
    - hold_production:
        type: approval
        requires:
        - deploy_staging
        filters:
          branches:
            only: master
    - deploy_production:
        requires:
        - hold_production
        filters:
          branches:
            only: master
    - delete_uat:
        filters:
          branches:
            only: master
  nightly:
    triggers:
    - schedule:
        cron: "0 2 * * *"
        filters:
          branches:
            only:
            - master
    jobs:
    - clean_up_ecr
    - deploy_staging
