version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  linting-executor:
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  cloud-platform-executor:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small

  test-executor:
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
      - image: circleci/postgres:10.5
      - image: circleci/redis:5.0
      - image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/laa-apply-for-legal-aid/clamav:1.0.2

references:
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.0.2
        bundle install --path=vendor/bundle --jobs=4 && bundle clean

  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        sudo apt-get install -y clamav-daemon
        sudo apt-get install -y libreoffice
        sudo apt-get install -y wkhtmltopdf
        sudo apt-get install -y git-crypt

  install_js_packages: &install_js_packages
    run:
      name: Install Yarn packages
      command: yarn --frozen-lockfile

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-2 --no-include-email)

  setup_uat_kubectl: &setup_uat_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        setup-kube-auth
        kubectl config use-context uat

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - v1-gems-cache-{{ checksum "Gemfile.lock" }}
        - v1-gems-cache

  restore_js_packages_cache: &restore_js_packages_cache
    restore_cache:
      keys:
        - v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
        - v1-yarn-packages-cache

  save_gems_cache: &save_gems_cache
    save_cache:
        key: v1-gems-cache-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

  save_js_packages_cache: &save_js_packages_cache
    save_cache:
      key: v1-yarn-packages-cache-{{ checksum "yarn.lock" }}
      paths:
        - node_modules

  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate db:seed

commands:
  hold-notification:
    description: Notify Slack about an awaiting approval job
    parameters:
      message:
        default: "$CIRCLE_USERNAME has a pending approval for $CIRCLE_BRANCH"
        description: A workflow in CircleCI is awaiting approval.
        type: string
      url:
        default: 'https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}'
        description: The URL to link back to.
        type: string
      webhook:
        default: '${SLACK_WEBHOOK}'
        description: >-
          Enter either your Webhook value or use the CircleCI UI to add your token
          under the 'SLACK_WEBHOOK' env var
        type: string
    steps:
      - slack/approval:
          message: << parameters.message >>
          webhook: << parameters.webhook >>

jobs:
  lint_checks:
    executor: linting-executor
    steps:
    - checkout
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - run:
        name: Run Rubocop
        command:  bin/rails rubocop
    - run:
        name: Run erblint
        command: bin/rails erblint

  unit_tests:
    executor: test-executor
    steps:
    - checkout
    - *install_packages_for_testing
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *setup_database
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run ruby tests
        command: bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
    - store_test_results:
        path: /tmp/test-results/rspec

  integration_tests:
    executor: test-executor
    steps:
    - checkout
    - *install_packages_for_testing
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *setup_database
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run integration tests
        command: SAVE_PAGES=true bundle exec cucumber --format junit --out /tmp/test-results/cucumber
    - store_artifacts:
        path: tmp/capybara
    - persist_to_workspace:
        root: tmp
        paths:
         - webhint_inputs
    - store_test_results:
        path: /tmp/test-results/cucumber

  webhint_reports:
    executor: linting-executor
    steps:
      - checkout
      - attach_workspace:
          at: tmp
      - *update_packages
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *restore_js_packages_cache
      - *install_js_packages
      - *save_js_packages_cache
      - run:
          name: Generate webhint reports
          command: ./bin/generate_webhint_reports.sh
      - run:
          name: gzip webhint reports
          command: tar -zcvf hint-report.tar.gz hint-report/
      - store_artifacts:
          path: ./hint-report.tar.gz
          destination: webhint-reports
      - run:
          name: gzip html pages
          command: tar -zcvf html-pages.tar.gz tmp/webhint_inputs/
      - store_artifacts:
          path: ./html-pages.tar.gz
          destination: html-pages

  build_and_push:
    executor: basic-executor
    steps:
    - checkout
    - setup_remote_docker
    - *update_packages
    - run: sudo apt-get install -y git-crypt
    - *decrypt_secrets
    - run:
        name: Build docker images
        command: |
          docker build \
          --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
          --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
          --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
          -t app .
    - *setup_aws_login
    - run:
        name: Push docker image to ECR repo
        command: |
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"

          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          fi

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy
  deploy_master_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to staging
        command: |
          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Kubectl deployment setup production
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context production
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |
          helm upgrade ${APPLICATION_DEPLOY_NAME} ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  clean_up_ecr:
    executor: linting-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_aws_login
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

  delete_uat_branch:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - run:
        name: Delete UAT release
        command: |
          ./bin/delete_uat_release

  hold_production_notification:
    executor: notification-executor
    steps:
      - hold-notification:
          message: "$CIRCLE_USERNAME has a pending production approval for $CIRCLE_BRANCH"

workflows:
  version: 2
  open_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: master
      - build_and_push:
          requires:
          - lint_checks
      - deploy_uat:
          requires:
          - build_and_push
      - unit_tests:
          requires:
          - lint_checks
      - integration_tests:
          requires:
          - lint_checks
      - webhint_reports:
          requires:
          - integration_tests

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: master
      - build_and_push:
          requires:
          - lint_checks
      - deploy_master_uat:
          requires:
            - build_and_push
      - delete_uat_branch:
          requires:
            - deploy_master_uat
      - unit_tests:
          requires:
            - lint_checks
      - integration_tests:
          requires:
            - lint_checks
      - webhint_reports:
          requires:
            - integration_tests
      - deploy_staging:
          requires:
            - webhint_reports
            - unit_tests
            - build_and_push
      - hold_production_notification:
          requires:
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - hold_production_notification
            - delete_uat_branch
      - deploy_production:
          requires:
            - hold_production

  nightly:
    triggers:
    - schedule:
        cron: "0 2 * * *"
        filters:
          branches:
            only: master
    jobs:
    - clean_up_ecr
