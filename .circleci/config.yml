version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  browser-tools: circleci/browser-tools@1.4.3
  slack: circleci/slack@4.5.2

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
  linting-executor:
    docker:
      - image: cimg/ruby:3.3.0-browsers
        environment:
          RAILS_ENV: test
          TZ: "Europe/London"
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.7.0
        environment:
          TZ: Europe/London
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small
  test-executor:
    docker:
      - image: ministryofjustice/apply-ci:latest-3.3.0
        environment:
          RAILS_ENV: test
          NODE_OPTIONS: --openssl-legacy-provider
      - image: cimg/postgres:14.10
      - image: cimg/redis:6.2
      - image: ghcr.io/ministryofjustice/hmpps-clamav:latest

commands:
  build-and-push-to-ecr:
    description: Build and push image to ECR repository
    steps:
      - run:
          name: Build docker image
          command: |
            docker build \
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
            --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
            -t app . | while read line ; do echo "$(date +"%T") > $line" ; done ;
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Push image to ECR repository
          command: |
            aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker tag app "${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}"
            docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}"

            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag app "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
              docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
            fi

references:
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  authenticate_k8s_live: &authenticate_k8s_live
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT_LIVE} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME_LIVE}
        kubectl config set-credentials circleci --token=${K8S_TOKEN_LIVE}
        kubectl config set-context ${K8S_CLUSTER_NAME_LIVE} --cluster=${K8S_CLUSTER_NAME_LIVE} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}

  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        bundle config set --local path 'vendor/bundle'
        bundle install --jobs=4 && bundle clean

  install_js_packages: &install_js_packages
    run:
      name: Install Yarn packages
      command: yarn --frozen-lockfile

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - v3.3.0-gems-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gemfile.lock" }}

  restore_js_packages_cache: &restore_js_packages_cache
    restore_cache:
      keys:
        - v3.3.0-yarn-packages-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

  save_gems_cache: &save_gems_cache
    save_cache:
        key: v3.3.0-gems-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

  save_js_packages_cache: &save_js_packages_cache
    save_cache:
      key: v3.3.0-yarn-packages-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules

jobs:
  lint_checks:
    executor: linting-executor
    steps:
    - checkout
    - setup_remote_docker
    - *update_packages
    - run: sudo apt-get install -y git-crypt
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run JavaScript tests
        command: bin/rails javascript_tests
    - run:
        name: Run StandardJS
        command: yarn run standardjs
    - run:
        name: Run Stylelint
        command: yarn run stylelint
    - run:
        name: Run Rubocop
        command:  bundle exec rubocop
    - run:
        name: Run erblint
        command: bin/rails erblint
    - run:
        name: Check if new apply docker images are needed, and build if so
        command: |
          COMMITS_IN_BRANCH=$(git rev-list main.. --count)
          ALL_FILES_CHANGED=$(git diff --name-only HEAD~$COMMITS_IN_BRANCH)
          RUBY_VERSION_CHANGED=$((echo "$ALL_FILES_CHANGED" | grep ".ruby-version" || true) | wc -l | xargs)
          if [ "$RUBY_VERSION_CHANGED" = "1" ]; then
            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKER_HUB_USERNAME}'", "password": "'${DOCKER_HUB_PAT}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
            ./.circleci/docker_build ci
            ./.circleci/docker_build base
          else
            echo ".ruby-version not changed"
          fi

  unit_tests:
    parallelism: 6
    executor: test-executor
    steps:
    - checkout
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - save_cache:
        key: apply-repo-{{ .Environment.CIRCLE_SHA1 }}
        paths:
          - ~/project
    - run: bundle exec rails db:prepare
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Install Headless Chrome dependencies
        command: |
          sudo apt-get install -yq \
          gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
          libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
          libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
          libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
          fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - run:
        name: Install Puppeteer with Chromium
        command: |
          yarn add puppeteer
    - run:
        name: Setup Code Climate test-reporter
        command: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
          chmod +x ./tmp/cc-test-reporter
    - run: bundle exec rails assets:precompile
    - run:
        name: Run ruby tests
        command: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
          echo "${TESTFILES}"
          bundle exec rspec --format progress \
          --format RspecJunitFormatter \
          -o /tmp/test-results/rspec/rspec.xml \
          -- ${TESTFILES}

    - store_test_results:
        path: /tmp/test-results/rspec

    - run:
        name: Stash Coverage Results
        command: |
          mkdir coverage_results
          cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}-unit.json
    - persist_to_workspace:
        root: .
        paths:
          - coverage_results

  integration_tests:
    parallelism: 10
    executor: test-executor
    steps:
    - checkout
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - run: bundle exec rails db:prepare
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run: bundle exec rails assets:precompile
    - browser-tools/install-chrome
    # - browser-tools/install-chromedriver # removed 31 Aug 2023 because version of chrome 116.0.5845.140 was not downloadable
    - run:
        name: Run integration tests
        command: |
          TESTFILES=$(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings)
          echo "${TESTFILES}"
          bundle exec cucumber --format junit,fileattribute=true --out /tmp/test-results/cucumber --format pretty -- ${TESTFILES}
    - store_artifacts:
        path: tmp/capybara
    - store_test_results:
        path: /tmp/test-results/cucumber
    - run:
        name: Stash Coverage Results
        command: |
          mkdir coverage_results
          cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}-integration.json
    - persist_to_workspace:
        root: .
        paths:
          - coverage_results

  coverage:
    executor: linting-executor
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: apply-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Process coverage
          command: |
            bundle exec rake simplecov:process_coverage
      - store_artifacts:
          path: ~/project/coverage
          destination: coverage

  build_and_push:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *decrypt_secrets
    - build-and-push-to-ecr

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *authenticate_k8s_live
    - *decrypt_secrets
    - run:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy

  deploy_main_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *decrypt_secrets
    - *authenticate_k8s_live
    - run:
        name: Helm deployment to staging
        command: |
          helm upgrade apply-for-legal-aid ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --namespace=${K8S_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
                        --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *authenticate_k8s_live
    - *decrypt_secrets
    - run:
        name: Helm deployment to production
        command: |
          helm upgrade apply-for-legal-aid ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --namespace=${K8S_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
                        --set image.tag="${CIRCLE_SHA1}"

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *authenticate_k8s_live
    - run:
        name: Delete dependabot deployment
        command: |
          ./bin/delete_dependabot_deployment

generic-slack-fail-post-step: &generic-slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

workflows:
  version: 2
  open_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - deploy_uat:
          context: laa-apply-for-legalaid-uat
          requires:
          - build_and_push
          <<: *generic-slack-fail-post-step
      - unit_tests:
          requires:
            - lint_checks
          <<: *generic-slack-fail-post-step
      - integration_tests:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - coverage:
          requires:
            - unit_tests
            - integration_tests
          <<: *generic-slack-fail-post-step
      - delete_dependabot_deployment:
          context: laa-apply-for-legalaid-uat
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
          - deploy_uat
          <<: *generic-slack-fail-post-step

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - unit_tests:
          requires:
            - lint_checks
          <<: *generic-slack-fail-post-step
      - integration_tests:
          requires:
            - lint_checks
          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          context: laa-apply-for-legalaid-uat
          requires:
            - integration_tests
            - unit_tests
            - build_and_push
          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: laa-apply-for-legalaid-staging
          requires:
            - integration_tests
            - unit_tests
            - build_and_push
          <<: *generic-slack-fail-post-step
      - slack/on-hold:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": ":circleci: $CIRCLE_USERNAME has a pending production approval for $CIRCLE_BRANCH"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request*: $CIRCLE_PULL_REQUEST"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                    }
                  ]
                }
              ]
            }
          requires:
            - deploy_main_uat
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - deploy_main_uat
            - deploy_staging
      - deploy_production:
          context: laa-apply-for-legalaid-production
          requires:
            - hold_production
          <<: *generic-slack-fail-post-step
