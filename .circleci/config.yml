version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.3
  slack: circleci/slack@4.5.2

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  linting-executor:
    docker:
      - image: cimg/ruby:3.1.0-browsers
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.23
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small

  test-executor:
    docker:
      - image: cimg/ruby:3.1.0-browsers
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
      - image: cimg/postgres:10.18
      - image: cimg/redis:5.0
      - image: ghcr.io/ministryofjustice/hmpps-clamav:latest
references:
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key
  authenticate_k8s_live: &authenticate_k8s_live
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT_LIVE} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME_LIVE}
        kubectl config set-credentials circleci --token=${K8S_TOKEN_LIVE}
        kubectl config set-context ${K8S_CLUSTER_NAME_LIVE} --cluster=${K8S_CLUSTER_NAME_LIVE} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        bundle install --path=vendor/bundle --jobs=4 && bundle clean

  install_lib_ffi: &install_lib_ffi
    run:
      name: Install libffi6
      command: |
        wget http://mirrors.kernel.org/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
        sudo apt install ./libffi6_3.2.1-8_amd64.deb

  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        sudo apt-get install -y clamav-daemon
        sudo apt-get install -y wkhtmltopdf
        sudo apt-get install -y git-crypt

  install_js_packages: &install_js_packages
    run:
      name: Install Yarn packages
      command: yarn --frozen-lockfile

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-2 --no-include-email)

  setup_uat_kubectl: &setup_uat_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        echo -n ${K8S_CLUSTER_CERT_LIVE} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME_LIVE}
        kubectl config set-credentials circleci --token=${K8S_TOKEN_LIVE}
        kubectl config set-context ${K8S_CLUSTER_NAME_LIVE} --cluster=${K8S_CLUSTER_NAME_LIVE} --user=circleci --namespace=${K8S_UAT_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}
  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - v2.7-gems-cache-{{ checksum "Gemfile.lock" }}
        - v2.7-gems-cache-

  restore_js_packages_cache: &restore_js_packages_cache
    restore_cache:
      keys:
        - v2.7-yarn-packages-cache-{{ checksum "yarn.lock" }}
        - v2.7-yarn-packages-cache-

  save_gems_cache: &save_gems_cache
    save_cache:
        key: v2.7-gems-cache-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

  save_js_packages_cache: &save_js_packages_cache
    save_cache:
      key: v2.7-yarn-packages-cache-{{ checksum "yarn.lock" }}
      paths:
        - node_modules

  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate db:seed
        bundle exec rake data:migrate

jobs:
  lint_checks:
    executor: linting-executor
    steps:
    - checkout
    - *install_lib_ffi
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - run:
        name: Run Rubocop
        command:  bundle exec rubocop
    - run:
        name: Run erblint
        command: bin/rails erblint

  unit_tests:
    executor: test-executor
    steps:
    - checkout
    - *install_lib_ffi
    - *install_packages_for_testing
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *setup_database
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run JavaScript tests
        command: bin/rails javascript_tests
    - run:
        name: Setup Code Climate test-reporter
        command: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
          chmod +x ./tmp/cc-test-reporter
    - run:
        name: Run ruby tests
        command: |
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD) # temp while changing branch name, delete
          COMMITS_IN_BRANCH=$(git rev-list "$DEFAULT_BRANCH".. --count) # temp while changing branch name, reset to main
          ALL_FILES_CHANGED=$(git diff --name-only HEAD~$COMMITS_IN_BRANCH)
          CCMS_FILES_CHANGED=$((echo "$ALL_FILES_CHANGED" | grep "/services/ccms\S*\." || true) | wc -l)
          CCMS_TESTS_SHOULD_RUN=$(if [ "$CCMS_FILES_CHANGED" -ne "0" ]; then echo true; fi)
          ./tmp/cc-test-reporter before-build
          INC_CCMS=$CCMS_TESTS_SHOULD_RUN bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
          ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/coverage/codeclimate.json
          ./tmp/cc-test-reporter upload-coverage -i tmp/coverage/codeclimate.json
    - store_test_results:
        path: /tmp/test-results/rspec
    - store_artifacts:
        path: ./coverage

  full_unit_tests:
    executor: test-executor
    steps:
    - checkout
    - *install_lib_ffi
    - *install_packages_for_testing
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *setup_database
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run ruby tests
        command: INC_CCMS=true INC_I18N=true bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
    - store_test_results:
        path: /tmp/test-results/rspec
    - store_artifacts:
        path: ./coverage
    - slack/notify:
        event: fail
        custom: |
          {
            "blocks": [
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": ":circleci: :nope: The full CCMS run has failed. Run: \n\n `INC_CCMS=true bundle exec rspec --tag ccms` \n\n locally to trace and resolve the issue."
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Mentions*: @here"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
  integration_tests:
    executor: test-executor
    steps:
    - browser-tools/install-chrome
    - browser-tools/install-chromedriver
    - checkout
    - *install_lib_ffi
    - *install_packages_for_testing
    - *decrypt_secrets
    - *restore_gems_cache
    - *install_gems
    - *save_gems_cache
    - *setup_database
    - *restore_js_packages_cache
    - *install_js_packages
    - *save_js_packages_cache
    - run:
        name: Run integration tests
        command: bundle exec cucumber --format junit --out /tmp/test-results/cucumber --format pretty
    - store_artifacts:
        path: tmp/capybara
    - store_test_results:
        path: /tmp/test-results/cucumber

  build_and_push:
    executor: basic-executor
    steps:
    - checkout
    - setup_remote_docker:
        version: 20.10.7
    - *update_packages
    - run: sudo apt-get install -y git-crypt
    - *decrypt_secrets
    - run:
        name: Build docker images
        command: |
          docker build \
          --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
          --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
          --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
          -t app .
    - *setup_aws_login
    - run:
        name: Push docker image to ECR repo
        command: |
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"

          case "${CIRCLE_BRANCH}" in
            main)
              docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
              docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          esac

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          ./bin/uat_deploy
  deploy_main_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --region eu-west-2 --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - *authenticate_k8s_live
    - deploy:
        name: Helm deployment to staging
        command: |
          helm upgrade apply-for-legal-aid ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-staging.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *authenticate_k8s_live
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |
          helm upgrade apply-for-legal-aid ./helm_deploy/apply-for-legal-aid/. \
                        --install --wait \
                        --namespace=${K8S_NAMESPACE} \
                        --values ./helm_deploy/apply-for-legal-aid/values-production.yaml \
                        --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                        --set image.tag="${CIRCLE_SHA1}"

  clean_up_ecr:
    executor: linting-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_aws_login
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

  delete_uat_branch:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - run:
        name: Delete UAT release
        command: |
          ./bin/delete_uat_release

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
    - checkout
    - setup_remote_docker
    - *setup_uat_kubectl
    - run:
        name: Delete dependabot deployment
        command: |
          ./bin/delete_dependabot_deployment

generic-slack-fail-post-step: &generic-slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

workflows:
  version: 2
  open_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - deploy_uat:
          requires:
          - build_and_push
          <<: *generic-slack-fail-post-step
      - unit_tests:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - integration_tests:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - delete_dependabot_deployment:
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
          - deploy_uat
          <<: *generic-slack-fail-post-step

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
          - lint_checks
          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - delete_uat_branch:
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - unit_tests:
          requires:
            - lint_checks
          <<: *generic-slack-fail-post-step
      - integration_tests:
          requires:
            - lint_checks
          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: laa-apply-for-legalaid-staging
          requires:
            - integration_tests
            - unit_tests
            - build_and_push
          <<: *generic-slack-fail-post-step
      - slack/on-hold:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": ":circleci: $CIRCLE_USERNAME has a pending production approval for $CIRCLE_BRANCH"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request*: $CIRCLE_PULL_REQUEST"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                    }
                  ]
                }
              ]
            }
          requires:
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - deploy_staging
            - delete_uat_branch
            - slack/on-hold
      - deploy_production:
          context: laa-apply-for-legalaid-production
          requires:
            - hold_production
          <<: *generic-slack-fail-post-step

  nightly:
    triggers:
    - schedule:
        cron: "0 2 * * *"
        filters:
          branches:
            only: main
    jobs:
    - clean_up_ecr

  full_ccms_unit_test_run:
    triggers:
    - schedule:
        cron: "15 2 * * *"
        filters:
          branches:
            only: main
    jobs:
    - full_unit_tests
