require "rails_helper"

RSpec.describe MalwareScanner do
  subject(:malware_scanner) do
    described_class.call(
      file_path:,
      uploader: provider,
      file_details:,
    )
  end

  let(:provider) { create(:provider) }
  let(:file_path) { Rails.root.join("spec/fixtures/files/documents/hello_world.pdf") }

  let(:file_details) do
    {
      name: Faker::File.file_name,
      size: Faker::Number.number,
      content_type: Faker::File.mime_type,
      foo: "bar",
    }.stringify_keys
  end
  let(:malware_scan_result) { MalwareScanResult.last }

  describe "#call" do
    it "creates a MalwareScanResult record" do
      expect { malware_scanner }.to change(MalwareScanResult, :count).by(1)
    end

    it "records uploader and details of file" do
      malware_scanner
      expect(malware_scan_result.uploader).to eq(provider)
      expect(malware_scan_result.file_details).to eq(file_details)
    end

    it "returns created MalwareScanResult record" do
      expect(malware_scanner).to be_a(MalwareScanResult)
      expect(malware_scanner.id).to eq(malware_scan_result.id)
    end

    context "with file with no virus", clamav: true do
      it "#virus_found? returns false" do
        expect(malware_scanner.virus_found?).to be(false)
      end

      it "#scan_result is file: OK" do
        expect(malware_scanner.scan_result).to match(/.*\/hello_world.pdf: OK/)
      end
    end

    context "with file with a virus", clamav: true do
      let(:file_path) { file_fixture("malware.doc") }

      it "MalwareScanResult#virus_found? returns true" do
        expect(malware_scanner.virus_found?).to be(true)
      end

      it "MalwareScanResult#scan_result is file: Trojan FOUND" do
        expect(malware_scanner.scan_result).to match(/.*\/malware.doc: .*Trojan.* FOUND/)
      end
    end

    context "when scanner is down" do
      let(:scan_result) { ["failed: No such file or directory. ERROR\n", "", instance_double(Process::Status, exitstatus: 2, success?: false)] }

      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      it "returns false" do
        expect(malware_scanner.scanner_working).to be false
      end

      it "notifies sentry" do
        expect(AlertManager).to receive(:capture_message).with(/ClamdscanError, failed: No such file or directory. ERROR/)
        malware_scanner
      end
    end

    context "with any scan_result" do
      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      let(:scan_result) do
        ["whatever scan result",
         "",
         instance_double(Process::Status, success?: true, exitstatus: 0)]
      end

      it "returns and records the result of the scan" do
        expect(malware_scanner.scan_result).to eq("whatever scan result")
        expect(malware_scan_result.scan_result).to eq("whatever scan result")
      end
    end

    context "when not saving result" do
      subject(:malware_scanner) { described_class.call(file_path:, save_result: false) }

      it "does not create a MalwareScanResult record" do
        expect { malware_scanner }.not_to change(MalwareScanResult, :count)
      end

      it "returns a MalwareScanResult object" do
        expect(malware_scanner).to be_a(MalwareScanResult)
      end
    end
  end
end
